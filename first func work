#313374837 Noam Tzuberi 
.data
.section        .rodata
char_format:   .string  " %c"
int_format:     .string " %d"
string_format:  .string " %s"
end_string:     .string "/0"
pstrlen_format: .string "first pstring length: %d,second pstring length: %d\n"


.align 8

.switch_case:
        .quad .case_50_60
        .quad .default
        .quad .case_52
        .quad .case_53
        .quad .case_54
        .quad .case_55
        .quad .default
        .quad .default
        .quad .default
        .quad .default
        .quad .case_50_60
        
.text 
.globl pstrlen
.type  pstrlen,    @function 
pstrlen:
    movzbq  -1(%rdi), %rax #go before the string- the length of the string
    ret


.globl replaceChar
.type  replaceChar,    @function 
replaceChar:

                   
                        
.globl run_func
.type  run_func,    @function   
run_func:
    pushq %rbp
    movq  %rsp, %rbp #for correct debugging
    subq $50, %rdx
    cmpq $10, %rdx
    ja   .default
    jmp  *.switch_case(,%rdx,8)
.func_done:
    xorq  %rax,%rax
    movq  %rbp, %rsp
    popq  %rbp 
    ret
    
.case_50_60:
    call pstrlen
    movq %rax,%r10
    movq %rsi,%rdi
    call pstrlen
    movq %rax,%r11
    movq $pstrlen_format, %rdi
    xorq %rax,%rax
    movq %r10, %rsi
    movq %r11, %rdx
    call printf
    jmp .func_done
  
 .case_52:

    pushq %rbp
    movq  %rbp, %rsp #for correct debugging

    subq  $16,%rsp
    movq  %rdi,%r8
    movq  %rsi,%r9
    xorq  %rax,%rax
    movq  $char_format, %rdi
    leaq  -16(%rbp), %rsi
    call  scanf
    xorq  %rax,%rax
     movq  $char_format, %rdi
    leaq  -8(%rbp), %rsi
    call  scanf
    movq  %r8,%rdi
    movzbq  -16(%rbp),%rsi
    movzbq  -8(%rbp),%rdx
    call replaceChar
    
 
   

.case_53:
subq $50, %rcx

.case_54:
subq $50, %rcx

.case_55:
subq $50, %rcx

.default:
subq $50, %rcx

        


     
.globl main
.type  main,    @function
main:
    movq %rsp, %rbp #for correct debugging
    pushq %rbp
    movq  %rsp, %rbp #for correct debugging
    subq  $528,%rsp
    xorq  %rax,%rax
    movq  $int_format, %rdi
    leaq  -528(%rbp), %rsi
    call  scanf
      
    xorq  %rax,%rax
    movq  $string_format, %rdi
    leaq  -527(%rbp), %rsi
    call  scanf
    xorq  %rcx,%rcx
    movb  -528(%rbp), %cl
    leaq  -527(%rbp, %rcx), %r10
    movq  $0, (%r10)
    


    ######################
    xorq  %rax,%rax
    movq  $int_format, %rdi
    leaq  -271(%rbp), %rsi
    call  scanf

    
    xorq  %rax,%rax
    movq  $string_format, %rdi
    leaq  -270(%rbp), %rsi
    call  scanf
    xorq  %rcx,%rcx
    movb  -271(%rbp), %cl
    leaq  -270(%rbp, %rcx), %r10
    movq  $0, (%r10)
    
###################
    
    xorq  %rax,%rax
    movq  $int_format, %rdi
    leaq  -14(%rbp), %rsi
    call  scanf

    
    # for moving the a
    xorq  %rdx,%rdx
    movb -14(%rbp), %dl
    leaq -527(%rbp), %rdi
    leaq -270(%rbp), %rsi
    call run_func
  
    xorq  %rax,%rax
    movq  %rbp, %rsp
    popq  %rbp 
    ret
    
